2025-08-06 10:10:23,461 | INFO     | wireguard-tests | Logging initialized successfully
2025-08-06 10:10:23,467 | DEBUG    | parse | format '{state_phrase}' -> '(?P<state_phrase>.+?)'
2025-08-06 10:10:23,468 | DEBUG    | parse | format 'I query wireguard connection status with "{metric}"' -> 'I query wireguard connection status with "(?P<metric>.+?)"'
2025-08-06 10:10:23,469 | DEBUG    | parse | format 'the response must contain the sourceVrouterID provided' -> 'the response must contain the sourceVrouterID provided'
2025-08-06 10:10:23,469 | DEBUG    | parse | format 'the response must contain the peerVrouterID provided' -> 'the response must contain the peerVrouterID provided'
2025-08-06 10:10:23,469 | DEBUG    | parse | format 'the response contains non-empty values for {metric_type}' -> 'the response contains non-empty values for (?P<metric_type>.+?)'
2025-08-06 10:10:23,488 | INFO     | wireguard-tests | Loaded environment file: /home/vboxuser/Documents/mcn-qa-pytest/env/qa.env
2025-08-06 10:10:23,492 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:23,496 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:23,497 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:23,497 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_valid source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:23,498 | INFO     | wireguard-tests | Params for scenario state 'valid source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:23,498 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:23,504 | DEBUG    | wireguard-tests | Using base endpoint URL: http://3.111.234.240:8080/metrics
2025-08-06 10:10:23,509 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:23,657 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589&timeFrom=2025-08-05T08%3A51%3A00Z&timeTo=2025-08-05T09%3A51%3A00Z HTTP/1.1" 200 None
2025-08-06 10:10:23,661 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the metrics should be returned in the response': [<FixtureDef argname='pytestbdd_stepdef_then_the metrics should be returned in the response' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:23,779 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:23,780 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:23,781 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:23,782 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_valid source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:23,782 | INFO     | wireguard-tests | Params for scenario state 'valid source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:23,783 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:23,786 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:23,882 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589&timeFrom=2025-08-05T08%3A51%3A00Z&timeTo=2025-08-05T09%3A51%3A00Z HTTP/1.1" 200 None
2025-08-06 10:10:23,884 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the metrics should be returned in the response': [<FixtureDef argname='pytestbdd_stepdef_then_the metrics should be returned in the response' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:23,942 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:23,943 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:23,943 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:23,944 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_valid source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:23,944 | INFO     | wireguard-tests | Params for scenario state 'valid source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:23,944 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:23,945 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:24,046 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589&timeFrom=2025-08-05T08%3A51%3A00Z&timeTo=2025-08-05T09%3A51%3A00Z HTTP/1.1" 200 None
2025-08-06 10:10:24,049 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the metrics should be returned in the response': [<FixtureDef argname='pytestbdd_stepdef_then_the metrics should be returned in the response' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,116 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,117 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,117 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,117 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_invalid source source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,118 | INFO     | wireguard-tests | Params for scenario state 'invalid source source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z', 'sourceVrouterID': '999999'}
2025-08-06 10:10:24,118 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,119 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:24,212 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589&timeFrom=2025-08-05T08%3A51%3A00Z&timeTo=2025-08-05T09%3A51%3A00Z&sourceVrouterID=999999 HTTP/1.1" 200 None
2025-08-06 10:10:24,215 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the response should indicate failure or empty data': [<FixtureDef argname='pytestbdd_stepdef_then_the response should indicate failure or empty data' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,216 | INFO     | wireguard-tests | Empty response data received as expected for failure scenario
2025-08-06 10:10:24,221 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,228 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,242 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,244 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_no source source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,245 | INFO     | wireguard-tests | Params for scenario state 'no source source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,246 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,249 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:24,350 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589&timeFrom=2025-08-05T08%3A51%3A00Z&timeTo=2025-08-05T09%3A51%3A00Z HTTP/1.1" 200 None
2025-08-06 10:10:24,353 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_metrics for all vrouters should be returned': [<FixtureDef argname='pytestbdd_stepdef_then_metrics for all vrouters should be returned' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,453 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,454 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,455 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,456 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_invalid peer source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,456 | INFO     | wireguard-tests | Params for scenario state 'invalid peer source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '999999', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,456 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,457 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:24,554 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=999999&timeFrom=2025-08-05T08%3A51%3A00Z&timeTo=2025-08-05T09%3A51%3A00Z HTTP/1.1" 200 None
2025-08-06 10:10:24,556 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the response should indicate failure or empty data': [<FixtureDef argname='pytestbdd_stepdef_then_the response should indicate failure or empty data' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,558 | INFO     | wireguard-tests | Empty response data received as expected for failure scenario
2025-08-06 10:10:24,567 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,570 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,571 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,572 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_no peer source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,574 | INFO     | wireguard-tests | Params for scenario state 'no peer source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,576 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,583 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:24,677 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&timeFrom=2025-08-05T08%3A51%3A00Z&timeTo=2025-08-05T09%3A51%3A00Z HTTP/1.1" 200 None
2025-08-06 10:10:24,682 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_metrics for all peers should be returned': [<FixtureDef argname='pytestbdd_stepdef_then_metrics for all peers should be returned' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,755 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,756 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,756 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,757 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_invalid timeFrom source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,758 | INFO     | wireguard-tests | Params for scenario state 'invalid timeFrom source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': 'invalid', 'timeTo': 'invalid'}
2025-08-06 10:10:24,758 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,759 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:24,852 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589&timeFrom=invalid&timeTo=invalid HTTP/1.1" 400 None
2025-08-06 10:10:24,855 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the response should indicate failure or empty data': [<FixtureDef argname='pytestbdd_stepdef_then_the response should indicate failure or empty data' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,857 | INFO     | wireguard-tests | Received non-error response during failure scenario; acceptable
2025-08-06 10:10:24,860 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,861 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,865 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:24,866 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_no timeFrom source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,867 | INFO     | wireguard-tests | Params for scenario state 'no timeFrom source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589'}
2025-08-06 10:10:24,868 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,871 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:24,984 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589 HTTP/1.1" 400 None
2025-08-06 10:10:24,988 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the response should indicate failure or empty data': [<FixtureDef argname='pytestbdd_stepdef_then_the response should indicate failure or empty data' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:24,989 | INFO     | wireguard-tests | Received non-error response during failure scenario; acceptable
2025-08-06 10:10:24,997 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,000 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,001 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,003 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_invalid timeTo source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,013 | INFO     | wireguard-tests | Params for scenario state 'invalid timeTo source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': 'invalid', 'timeTo': 'invalid'}
2025-08-06 10:10:25,014 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,016 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:25,112 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589&timeFrom=invalid&timeTo=invalid HTTP/1.1" 400 None
2025-08-06 10:10:25,115 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the response should indicate failure or empty data': [<FixtureDef argname='pytestbdd_stepdef_then_the response should indicate failure or empty data' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,117 | INFO     | wireguard-tests | Received non-error response during failure scenario; acceptable
2025-08-06 10:10:25,121 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,123 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,124 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,124 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_no timeTo source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,125 | INFO     | wireguard-tests | Params for scenario state 'no timeTo source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589'}
2025-08-06 10:10:25,125 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,131 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:25,226 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589 HTTP/1.1" 400 None
2025-08-06 10:10:25,229 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the response should indicate failure or empty data': [<FixtureDef argname='pytestbdd_stepdef_then_the response should indicate failure or empty data' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,231 | INFO     | wireguard-tests | Received non-error response during failure scenario; acceptable
2025-08-06 10:10:25,235 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,236 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,238 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,247 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_incorrect timeTo format source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,248 | INFO     | wireguard-tests | Params for scenario state 'incorrect timeTo format source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '07-25-2025T11:00:00'}
2025-08-06 10:10:25,248 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,252 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:25,342 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589&timeFrom=2025-08-05T08%3A51%3A00Z&timeTo=07-25-2025T11%3A00%3A00 HTTP/1.1" 400 None
2025-08-06 10:10:25,345 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the response should indicate failure or empty data': [<FixtureDef argname='pytestbdd_stepdef_then_the response should indicate failure or empty data' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,346 | INFO     | wireguard-tests | Received non-error response during failure scenario; acceptable
2025-08-06 10:10:25,350 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,355 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,357 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,358 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_timeTo is entirely omitted source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,360 | INFO     | wireguard-tests | Params for scenario state 'timeTo is entirely omitted source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,360 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,362 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:25,476 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589&timeFrom=2025-08-05T08%3A51%3A00Z&timeTo=2025-08-05T09%3A51%3A00Z HTTP/1.1" 200 None
2025-08-06 10:10:25,480 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the response should indicate failure or empty data': [<FixtureDef argname='pytestbdd_stepdef_then_the response should indicate failure or empty data' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,482 | INFO     | wireguard-tests | Empty response data received as expected for failure scenario
2025-08-06 10:10:25,488 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,496 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,498 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,500 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_valid source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,501 | INFO     | wireguard-tests | Params for scenario state 'valid source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,502 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status with "wireguard_tx_bytes"': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status with "{metric}"' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,507 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:25,600 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_tx_bytes&peerVrouterID=1589&timeFrom=2025-08-05T08%3A51%3A00Z&timeTo=2025-08-05T09%3A51%3A00Z HTTP/1.1" 200 None
2025-08-06 10:10:25,603 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the metrics should be returned in the response': [<FixtureDef argname='pytestbdd_stepdef_then_the metrics should be returned in the response' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,669 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,670 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,670 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,671 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_valid source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,671 | INFO     | wireguard-tests | Params for scenario state 'valid source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,671 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status with "wireguard_rx_bytes"': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status with "{metric}"' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,672 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:25,771 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589&timeFrom=2025-08-05T08%3A51%3A00Z&timeTo=2025-08-05T09%3A51%3A00Z HTTP/1.1" 200 None
2025-08-06 10:10:25,774 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the metrics should be returned in the response': [<FixtureDef argname='pytestbdd_stepdef_then_the metrics should be returned in the response' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,852 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,853 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,853 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,853 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_valid source, invalid peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,854 | INFO     | wireguard-tests | Params for scenario state 'valid source, invalid peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '999999', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,854 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status with "wireguard_tx_bytes"': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status with "{metric}"' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,855 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:25,951 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_tx_bytes&peerVrouterID=999999&timeFrom=2025-08-05T08%3A51%3A00Z&timeTo=2025-08-05T09%3A51%3A00Z HTTP/1.1" 200 None
2025-08-06 10:10:25,954 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the response should indicate failure or empty data': [<FixtureDef argname='pytestbdd_stepdef_then_the response should indicate failure or empty data' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,955 | INFO     | wireguard-tests | Empty response data received as expected for failure scenario
2025-08-06 10:10:25,958 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,962 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,964 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:25,976 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_valid source, peer, and invalid time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,981 | INFO     | wireguard-tests | Params for scenario state 'valid source, peer, and invalid time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': 'invalid', 'timeTo': 'invalid'}
2025-08-06 10:10:25,982 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status with "wireguard_rx_bytes"': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status with "{metric}"' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:25,985 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:26,086 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589&timeFrom=invalid&timeTo=invalid HTTP/1.1" 400 None
2025-08-06 10:10:26,091 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the response should indicate failure or empty data': [<FixtureDef argname='pytestbdd_stepdef_then_the response should indicate failure or empty data' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:26,092 | INFO     | wireguard-tests | Received non-error response during failure scenario; acceptable
2025-08-06 10:10:26,095 | INFO     | wireguard-tests | Built params: {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:26,096 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_the WireGuard metrics API is available': [<FixtureDef argname='pytestbdd_stepdef_given_the WireGuard metrics API is available' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>, <FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:26,097 | INFO     | wireguard-tests | Params for scenario state 'the WireGuard metrics API is available': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:26,098 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_given_valid source, peer, and time range parameters': [<FixtureDef argname='pytestbdd_stepdef_given_{state_phrase}' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:26,100 | INFO     | wireguard-tests | Params for scenario state 'valid source, peer, and time range parameters': {'query': 'wireguard_rx_bytes', 'peerVrouterID': '1589', 'timeFrom': '2025-08-05T08:51:00Z', 'timeTo': '2025-08-05T09:51:00Z'}
2025-08-06 10:10:26,102 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_when_I query wireguard connection status with "wireguard_rx_bytes"': [<FixtureDef argname='pytestbdd_stepdef_when_I query wireguard connection status with "{metric}"' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
2025-08-06 10:10:26,106 | DEBUG    | urllib3.connectionpool | Starting new HTTP connection (1): 3.111.234.240:8080
2025-08-06 10:10:26,203 | DEBUG    | urllib3.connectionpool | http://3.111.234.240:8080 "GET /metrics?query=wireguard_rx_bytes&peerVrouterID=1589&timeFrom=2025-08-05T08%3A51%3A00Z&timeTo=2025-08-05T09%3A51%3A00Z HTTP/1.1" 200 None
2025-08-06 10:10:26,205 | DEBUG    | pytest_bdd.scenario | Adding providers for fixture 'pytestbdd_stepimpl_then_the values should be monotonically increasing': [<FixtureDef argname='pytestbdd_stepdef_then_the values should be monotonically increasing' scope='function' baseid='api/vrouter/steps/test_wireguard_metrics.py'>]
